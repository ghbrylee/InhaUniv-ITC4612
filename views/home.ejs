<style>
    #div_books img {
        cursor : pointer;
    }
    #div_books .bi-basket{
        cursor: pointer;
        color: green;
    }
</style>
<div class="row my-5"> 
    <div class="col">
        <div class="row mb-2 justify-content-end">
            <form name="frm" class="col-6 col-m-4 col-lg-3">
                <div class="input-group">
                    <input name="query" class="form-control" value="자바">
                    <button class="btn btn-primary">검색</button>
                </div>
            </form>
        </div>
        <!--검색 결과 출력-->
        <div id="div_books" class="row"></div> <!-- 도서정보 출력 템플릿은 div_books에 들어가서 검색결과 출력에 보여주는거임-->

        <!--페이지 이동-->
        <div class="text-center">
            <button id="prev" class="btn btn-primary">이전</button>
            <span id="span_page" class="mx-3">1/10</span>
            <button id="next" class="btn btn-primary">다음</button>
        </div>

    </div>
</div>
<!--도서정보 출력 템플릿-->
<!-- @index 몇번째 있는지 알려주는거  -->
<!-- @this 오브젝트를 스트링으로 바꿔줘야함 / book이라는 함수를 만들었음 book @this -->
<!-- class= / book= <-- 어트리뷰트라고함 / 장바구니 아이콘을 누르면 book 어트리뷰트(속성)에 저장 -->
<script type="x-handlebars-template" id="temp_books">
    {{#each documents}}
    <div class="col-6 col-md-4 col-lg-2 mb-2">
        <div class="card">
            <div class="card-body">
                <img src="{{chkImage thumbnail}}" width="90%" index="{{@index}}">
                <div class="ellipsis text-center">{{title}}</div>
            </div>
            <div class="card-footer">
                {{fmtPrice price}}
                <i class="cart bi bi-basket float-end" book="{{book @this}}"></i>
            </div>        
        </div>    
    </div>
    <%-include('books/modal.ejs')%> 
    {{/each}}
</script>
<!--Handlebars 함수-->
<script>
    Handlebars.registerHelper("chkImage", function(image){
        if(image){
            return image;
        }else{
            return "https://via.placeholder.com/120x170"
        }
    });

    Handlebars.registerHelper("fmtPrice", function(price){
        if(price) return price.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',') + '원';
    });
    Handlebars.registerHelper("book", function(book){ //book 함수 @this에 쓰려고 만듬 / @this = function(book)
        return JSON.stringify(book); // JOSN 오브젝트를 스트링으로 바꿔줘라
    });
</script>

<script type="module"> //type="module" 쓰는 이유
    import {app} from '/javascripts/firebaseInit.js';
    import { getDatabase, ref, set, get  } // getDatabase=데이터베이스가져와 / ref=어디에 쓸건지 주소 / set=쓰기 / get=장바구니에 이미 있는지 확인하려고 get으로 읽음
    from "https://www.gstatic.com/firebasejs/10.4.0/firebase-database.js";
    const db=getDatabase(app); //데이터베이스를 db에 가져와 설정파일이 app에 있으니까 ()안에 app


    let query=$(frm.query).val();
    let page=1;

    //장바구니 아이콘을 클릭했을 때
    $("#div_books").on("click", ".cart", async function(){
        if(!sessionStorage.getItem("email")){ // sessionStorage에 email이 없으면
            alert("로그인이 필요합니다.");
            location.href="/users/login"; // 로그인 창으로 가
        }else{
            //장바구니에 상품 정보 저장
            const book=JSON.parse($(this).attr("book")); //여기서 this는 cart임 / 스트링을 오브젝트로 바꿀 때 JSON.parse()
            console.log(book);
            const ref_book= `cart/${sessionStorage.getItem("uid")}/${book.isbn}`;
            // const ref_book= ref(db, `cart/${sessionStorage.getItem("uid")}/${book.isbn}`);

            //장바구니에 도서가 있는지 체크
            const snapshot = await get(ref(db, ref_book)); //성공하면 snapshot에 값이 들어감 / await 가져올떄까지 기다려 / 어디에 있는지 꺼내올 때(get) 레퍼런스(ref)만 지정해주면 됨
            // const snapshot = await get(ref_book);
            if(snapshot.val()){
                alert("이미 장바구니에 추가 된 도서입니다.");
            }else{
                if(!confirm("장바구니에 저장하시겠습니까?")) return; //!붙어서 안넣을때 리턴임
                set(ref(db, ref_book), book);
                // set(ref_book, book);
                alert("장바구니에 추가되었습니다.");
            }
        }    
    });
    
    // 이미지를 클릭했을 때
    $("#div_books").on("click", "img", function(){
        let index=$(this).attr("index");
        //alert(index);
        $("#modal" + index).modal("show");
    });

    $(frm).on("submit", function(e){
        e.preventDefault();
        query=$(frm.query).val();
        page=1;
        getBooks();
    });

    //다음버튼을 클릭한 경우
    $("#next").on("click", function(){
        page++;
        getBooks();
    });

      //이전버튼을 클릭한 경우
      $("#prev").on("click", function(){
        page--;
        getBooks();
    });

    getBooks();
    function getBooks(){
        $.ajax({
            type:"get",
            url:"https://dapi.kakao.com/v3/search/book?target=title",
            headers:{"Authorization":"KakaoAK f23e7e2e27ac02c8ef22fe940b70cfd0"},
            data:{query:query, page:page, size:6},
            success: function(result){
                console.log(result);
                let temp=Handlebars.compile($("#temp_books").html());
                $("#div_books").html(temp(result));

                let last=Math.ceil(result.meta.pageable_count/5);
                $("#span_page").html(page + "/" + last);

                if(page==1) $("#prev").attr("disabled", true);
                else $("#prev").attr("disabled", false);

                if(result.meta.is_end) $("#next").attr("disabled", true);
                else $("#next").attr("disabled", false);
            }
        });
    }
</script>